{
  "hash": "cb6e48bbf0e03f318621b7f21aa34683",
  "result": {
    "markdown": "---\ntitle: RecSys MLOps. BigQuery ML and Vertex AI. Part 1\nauthor: \"Francisco Mussari\"  \ndate: 2023-07-17  \nimage: \"pipeline.PNG\"\ncategories: [Movielens, BigQuery, BigQuery ML, RecSys, Recommender, Pipeline, Vertex AI, MLOps]  \nformat:\n  html:\n    toc: true\n    toc-depth: 3\n---\n\n## Overview\n\nThis post is about training a Matrix Factorization model with BigQuery ML and deploying it as Docker container. The end-to-end process is orchestrated through a Vertex AI pipeline.  \n  \nThe post is strongly based on this tutorial:\n- [YouTube: Recommendation Engine Pipeline with BigQuery ML and Vertex AI Pipelines using Matrix Factorization](https://youtu.be/S0wNWOR4WoE)\n  \nBut there are some key differences:  \n\n1. This post documents the whole process, from loading the data into BigQuery to how to make recommendations in different ways.\n2. On July 5th there was a [Transition to BigQuery editions](https://cloud.google.com/bigquery/docs/editions-transition) which resulted in some changes being made to adapt the scripts shown in the original video.\n3. When trying to replicate the video tutorial I had to solve some issues with the pipeline failing to run. Most of the issues were very hard to debug, with misleading error messages and layers over layer of abstraction between python libraries and component definitions. At the end most of the errors were about the Default Service Account not having the requiered permission. So,\n4. In this post we can see and run each step and command to create a Service Account and grant this account granular permissions to the Google Cloud resources needed for the end to end process to run. This is what the Google documentation recommends.\n5. There are also the commands to enable each service API needed for the project.\n\nAt the end we shoud get a flow like this:\n\n![](pipeline.PNG)\n\n### Additional Resources\n- [YouTube: Lesson 7: Practical Deep Learning for Coders 2022 - Collaborative filtering deep dive](https://youtu.be/p4ZZq0736Po?t=3720)\n- [Tutorial: Use BigQuery ML to make recommendations from Google analytics data](https://cloud.google.com/bigquery/docs/bigqueryml-mf-implicit-tutorial)\n\n## Blog Post Parts\n\n### Part 1. Train and Deploy\n- Loading MovieLens data into BigQuery\n- Setup services and accounts for the Vertex AI Pipeline to run\n- Create and run the Pipeline and its Components\n- Make sure no reservation or slot assignment remains active\n  \n### Part 2. Inference\n- Use the Cloud Run endpoint to get recommendations\n- Get recommendations from BigQuery ML\n- Get Weights and Bias (Embeddings) and interpret them\n- Cosine similarity with NumPy\n\n## Before you begin\n1. [Select or create a Google Cloud project](https://console.cloud.google.com/cloud-resource-manager). \n2. [Make sure that billing is enabled for your project](https://cloud.google.com/billing/docs/how-to/modify-project).\n3. You can run the code locally or in Colab. If you are locally you need to install the [gcloud CLI](https://cloud.google.com/sdk/docs/install).\n\n## Loading data into BigQuery\nReference: [Load the Movielens dataset into BigQuery](https://cloud.google.com/bigquery/docs/bigqueryml-mf-explicit-tutorial#step_two_load_the_movielens_dataset_into)\n\n### Authenticate your Google Cloud account\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport sys\nif \"google.colab\" in sys.modules:\n    IS_COLAB = True\n    from google.colab import auth as google_auth\n    google_auth.authenticate_user()\nelse:\n    ! gcloud auth login\n```\n:::\n\n\n",
    "supporting": [
      "bqml_vertex_recsys_part1_files"
    ],
    "filters": [],
    "includes": {}
  }
}