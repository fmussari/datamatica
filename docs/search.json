[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I’m Francisco Mussari, blogging from Caracas about data, ai, cloud computing, engineering and social sciences."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "datamatica",
    "section": "",
    "text": "computer-vision\n\n\ndeeplearning\n\n\nazure\n\n\ncustom-vision\n\n\nobject-detection\n\n\n\n\n\n\n\n\n\n\n\nOct 8, 2022\n\n\nFrancisco Mussari\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2022\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nSep 30, 2022\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/object-detection-with-azure-custom-vision/ObjectDetectionWithAzureCustomVision_Part_1.html",
    "href": "posts/object-detection-with-azure-custom-vision/ObjectDetectionWithAzureCustomVision_Part_1.html",
    "title": "Telecom Equipment Detection with Azure Custom Vision - Part 1",
    "section": "",
    "text": "Building an Object Detection with Azure Custom Vision - Part 1"
  },
  {
    "objectID": "posts/object-detection-with-azure-custom-vision/ObjectDetectionWithAzureCustomVision_Part_1.html#introduction",
    "href": "posts/object-detection-with-azure-custom-vision/ObjectDetectionWithAzureCustomVision_Part_1.html#introduction",
    "title": "Telecom Equipment Detection with Azure Custom Vision - Part 1",
    "section": "Introduction",
    "text": "Introduction\nIn this series of post we are going to follow along the process and code required to train an object detection model using Azure Custom Vision (in its free tier.\nWe are going to use real world pictures compiled from work I have done over the years in Venezuela. For this supervised learning problem we need to tagged images. So we will use Smart Labeler to do that.\nAfter the model is published in Azure service, we can use the API to build and share a demo with Gradio and Huggingface.\nHere is the one that is already published for you to test:\nTelecom-Object-Detection\n\nThe model will be trained to detect the following objects:\n\nGrid Antenna\nPanel antenna\nRadome antenna\nRRU\nShroud antenna\nSolid antenna\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrid\n\n\nPanel\n\n\nRadome\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRRU\n\n\nShroud\n\n\nSolid"
  },
  {
    "objectID": "posts/object-detection-with-azure-custom-vision/ObjectDetectionWithAzureCustomVision_Part_1.html#tutorial-parts",
    "href": "posts/object-detection-with-azure-custom-vision/ObjectDetectionWithAzureCustomVision_Part_1.html#tutorial-parts",
    "title": "Telecom Equipment Detection with Azure Custom Vision - Part 1",
    "section": "Tutorial Parts",
    "text": "Tutorial Parts\n\nPart 1 will cover:\n\nCreating a free Azure Custom Vision Service.\nUploading the images to the service.\n\nPart 2 will cover:\n\nAnalyzing what happens to the images after uploading.\nHow to label the images using Smart Labeler\nTraining and publishing the model.\n\nPart 3 will cover:\n\nCreate a Huggingface Gradio Demo."
  },
  {
    "objectID": "posts/object-detection-with-azure-custom-vision/ObjectDetectionWithAzureCustomVision_Part_1.html#references",
    "href": "posts/object-detection-with-azure-custom-vision/ObjectDetectionWithAzureCustomVision_Part_1.html#references",
    "title": "Telecom Equipment Detection with Azure Custom Vision - Part 1",
    "section": "References",
    "text": "References\n\nMicrosoft Learn Excersice: Detect Objects in Images with Custom Vision\nCustom Vision Documentation: Quickstart: Create an object detection project with the Custom Vision client library\nREST API Endpoint: Custom Vision REST API reference - Azure Cognitive Services\nAPIs Documentation: Custom_Vision_Training_3.3\nAzure SDK for Python: Azure Cognitive Services Computer Vision SDK for Python\nSource Code: Azure/azure-sdk-for-python"
  },
  {
    "objectID": "posts/object-detection-with-azure-custom-vision/ObjectDetectionWithAzureCustomVision_Part_1.html#part-1.1.-create-a-custom-vision-service",
    "href": "posts/object-detection-with-azure-custom-vision/ObjectDetectionWithAzureCustomVision_Part_1.html#part-1.1.-create-a-custom-vision-service",
    "title": "Telecom Equipment Detection with Azure Custom Vision - Part 1",
    "section": "Part 1.1. Create a Custom Vision Service",
    "text": "Part 1.1. Create a Custom Vision Service\nI’m not going to get into the details of creating the service. And the reason is that there is a detailed tutorial covering not just that, but also the code for uploading and training a simple model. I encourage you to try it first:\nDetect Objects in Images with Custom Vision\n\nFor this tutorial I created a Custom Vision with the following settings:\n\nCustom Vision service:\n\nResource: ai102cvision\nResource Kind: Custom Vision Training\n\nProject:\n\nName: Telecom Equipment Detection\nDescription: Detect different types of antennas\nResource: ai102cvision [F0]\nProject Types: Object Detection\nDomains: General"
  },
  {
    "objectID": "posts/object-detection-with-azure-custom-vision/ObjectDetectionWithAzureCustomVision_Part_1.html#part-1.2.-upload-the-images",
    "href": "posts/object-detection-with-azure-custom-vision/ObjectDetectionWithAzureCustomVision_Part_1.html#part-1.2.-upload-the-images",
    "title": "Telecom Equipment Detection with Azure Custom Vision - Part 1",
    "section": "Part 1.2. Upload the images",
    "text": "Part 1.2. Upload the images\n\nEnvironment variables\nUpdate the configuration variables in the .env file that contains:\nTrainingEndpoint=YOUR_TRAINING_ENDPOINT\nTrainingKey=YOUR_TRAINING_KEY\nProjectID=YOUR_PROJECT_ID\n\n\n\n\n\n\nNote\n\n\n\nIn order to protect my credentials, I’m going to store .env file in a creds folder that isn’t being pushed to github.\n\n\n\nDOTENV_PATH = './.env'\n\n\n\nInstall and import libraries\nWe need to install Custom Vision’s Python SDK and python-dotenv:\n! pip install azure-cognitiveservices-vision-customvision==3.1.0\n! pip install python-dotenv\n\nfrom azure.cognitiveservices.vision.customvision.training import CustomVisionTrainingClient\nfrom azure.cognitiveservices.vision.customvision.training.models import ImageFileCreateBatch, ImageFileCreateEntry, Region\nfrom msrest.authentication import ApiKeyCredentials\nimport time\nimport json\nimport os\n\nimport pandas as pd\nfrom dotenv import load_dotenv\nfrom pathlib import Path\n\nfrom PIL import Image\nfrom PIL import UnidentifiedImageError\nimport matplotlib.pyplot as plt\n\n\n\nCredentials and services\n\nApiKeyCredentials\nCustomVisionTrainingClient\nCustomVisionTrainingClient.get_project()\n\n\nload_dotenv(DOTENV_PATH)\ntraining_endpoint = os.getenv('TrainingEndpoint')\ntraining_key = os.getenv('TrainingKey')\nproject_id = os.getenv('ProjectID')\n\ncredentials = ApiKeyCredentials(in_headers={\"Training-key\": training_key})\ntraining_client = CustomVisionTrainingClient(training_endpoint, credentials)\ncustom_vision_project = training_client.get_project(project_id)\n\n\n\nFunctions\n\n# Borrowed from fastai library\ndef verify_image(fn):\n    \"Confirm that `fn` can be opened\"\n    try:\n        im = Image.open(fn)\n        im.draft(im.mode, (32,32))\n        im.load()\n        return True\n    except: return False\n    #except PIL.UnidentifiedImageError:\n\nThe SDK / API allows to upload images in batches but I didn’t find a way to match the local image name with the id generated by the service. Then I opted to create a function that uploads the pictures one by one.\n\nImageFileCreateEntry\nCustomVisionTrainingClient.create_images_from_files()\n\n\ndef Upload_Images_1by1(pictures: list[Path]) -> list('dict'):\n    \"\"\"Upload the pictures from a list of paths,\n    one by one to keep track of the relation between\n    local image name and Azure image id.\n    And to track the ones that python fails opening\n    \"\"\"\n    print(\"Uploading images...\")\n\n    processed_ids = []\n    processed_status = []\n    picture_names = []\n\n    for pic_path in pictures:\n\n        if verify_image(pic_path):\n            with open(pic_path, mode=\"rb\") as image_data:\n                image_entry = ImageFileCreateEntry(name=pic_path.name, contents=image_data.read())\n            \n            # Upload the list of (1) images as a batch\n            upload_result = training_client.create_images_from_files(\n                custom_vision_project.id, \n                # Creates an ImageFileCreateBatch from a list of (1) ImageFileCreateEntry\n                ImageFileCreateBatch(images=[image_entry])\n            )\n            # Check for failure\n            if not upload_result.is_batch_successful:\n                pic_status = upload_result.images[0].status\n                pic_id = None\n            else:\n                pic_status = upload_result.images[0].status\n                pic_id = upload_result.images[0].image.id\n        else:\n            pic_status = \"ReadError\" # Equivalente to SDK `ErrorSource`\n            pic_id = None\n        \n        processed_status.append(pic_status)\n        processed_ids.append(pic_id)\n        picture_names.append(pic_path.name)\n        print(pic_path.name, \"//\", pic_id, \"//\", pic_status)\n    \n    return {\"image_name\": picture_names, \"image_id\": processed_ids, \"image_status\": processed_status}\n\n\n\nExplore pictures\n\npics_folder = Path('./train_images')\n\npictures = sorted(list(pics_folder.iterdir()))\n\nprint(f\"There are {len(pictures)} pictures\")\n\nThere are 203 pictures\n\n\n\nfig, axes = plt.subplots(3, 4, figsize=(16, 12))\n\ndef show_img(im, figsize=None, ax=None):\n    if not ax: fig, ax = plt.subplots(figsize=figsize)\n    ax.imshow(im)\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n    return ax\n\nfor i, ax in enumerate(axes.flat):\n    im = Image.open( pictures[i*10] )\n    ax = show_img(im, ax=ax)\n\n\n\n\nAs you can see the pictures are very varied. Different cameras, lighting conditions, focus, resolutions and sizes…\n\n\nUpload the pictures\n\nuploaded_images_df = pd.DataFrame(columns=[\"image_name\", \"image_id\", \"image_status\"])\n\n\nupload_batch = Upload_Images_1by1(pictures)\n\nUploading images...\n41.JPG // 452a0b58-0dc5-41ff-83d1-8d1ae7bd5d1c // OK\nCIMG0030.JPG // 96b7774e-f5ad-4591-aa71-99ad5c71135e // OK\nCIMG0031.JPG // 3027bc7e-6e21-4b13-a7d7-bb7e08ce6824 // OK\nCIMG0056.JPG // 1320ab2e-3405-4853-bd7e-b0ef0f915d4b // OK\nCIMG0059.JPG // aa67eceb-3db0-4026-bf16-0842c006e6ac // OK\nCIMG0061.JPG // 7810ef2d-a468-41f3-ac95-1b7829be1601 // OK\nCIMG0077.JPG // 2d342ea6-e5d8-408f-8c04-5156c0302cf7 // OK\nCUMACA 11.jpg // 2c55467b-5de5-4329-91d2-a2fafdedd080 // OK\nDSC06638.JPG // 077cd9ce-35aa-475f-a79f-5490f32fa959 // OK\nDSCN3122.JPG // 748d7763-d9fb-4cd7-ac21-0915cb832dff // OK\nDSCN3205.JPG // cb4c70b7-d3e9-4087-9162-d68cccea90c7 // OK\nDSCN3246.JPG // 4c14b21b-cd28-4160-b1c5-9a80afb6e2d0 // OK\nDSCN3314.JPG // 501acc1c-a881-4142-88bb-e5602e665081 // OK\nDSCN3368.JPG // cc8a7680-20a8-43eb-93cc-b5d235d7801a // OK\nDSCN3387.JPG // 9d32611b-fa90-46f6-b154-bde7f5998e05 // OK\nDSCN3388.JPG // 18ca46b7-9035-4691-a688-1d99c419a526 // OK\nDSCN3391.JPG // b0702c44-f1fd-4a2a-baec-ba2aeb1560dc // OK\nDSCN3392.JPG // ea23308a-6f71-464a-8eab-dbc7efde6066 // OK\nDSCN3394.JPG // b1abe2b9-5e66-4432-8b61-4cfb9cd57b82 // OK\nDSCN3396.JPG // 95ce423d-4617-4e9b-bab7-7697450fb6fb // OK\nDSCN3398.JPG // 9adee8e4-fbe4-45f1-afe6-53ebc0ac55c4 // OK\nDSCN3399.JPG // 955c57e0-18b4-4768-8400-95024109d3c3 // OK\nDSCN3435.JPG // e249f17a-6771-4975-9d93-622cd781144f // OK\nDSCN3450.JPG // df1294c4-3779-4a54-8ebe-702d17e7d495 // OK\nDSCN3472.JPG // 409b6144-92c3-4698-a594-8bc92a96fabe // OK\nESMERALDA 1.jpg // be4e6290-9230-4021-b72f-0e8891fa3872 // OK\nESMERALDA 2.jpg // fde468c9-753b-4880-9676-a7e754c77794 // OK\nESMERALDA 29.jpg // 42f84445-2b58-470d-9be8-c278485564d0 // OK\nESMERALDA 3.jpg // b25d1168-260e-4ed3-88a2-a55bd0e32e16 // OK\nESMERALDA 4.jpg // 37796bf2-3915-4ab2-aa9f-0daba42c7356 // OK\nESMERALDA 40.jpg // a17e011f-70ef-44a2-ae9b-5d7186a2ba9b // OK\nESMERALDA 41.jpg // 090bfad3-465e-4119-82ae-9f1f567b4cfd // OK\nESMERALDA 43.jpg // 8444e5a7-e5da-469c-b149-8ab38a0698a9 // OK\nHPIM3978.jpg // d6ac8ac3-ff97-4ce7-b0fb-c123ee900ab8 // OK\nIMG_1093.JPG // fb053edb-679b-45c8-b371-70874e18c429 // OK\nIMG_1096.JPG // 4d7faa3c-e819-4326-add0-29a60c7e61b0 // OK\nIMG_1098.JPG // 4b682a80-1abd-41de-bb93-b4b67296b77b // OK\nIMG_1100.JPG // 0310e433-3227-4e89-adf1-782345c8d1fc // OK\nIMG_1102.JPG // 36510685-9c36-4b8f-9e27-fe5e249af18c // OK\nIMG_1104.JPG // 0267cddb-ed13-4301-809c-3ac6370ee7b5 // OK\nIMG_1161.JPG // 6dcd610b-41e3-4d2b-a9e8-40794dbe1895 // OK\nIMG_1162.JPG // 0eed376a-a1b6-419d-a1ad-bac3a2105760 // OK\nIMG_1163.JPG // f8e1881b-239e-4d2b-94ad-05b61647161a // OK\nIMG_1164.JPG // 39db006c-ab26-4486-9174-97d6f4219a88 // OK\nIMG_1165.JPG // d1e7e61f-b124-435b-a634-4394dac068f6 // OK\nIMG_1166.JPG // 18734ab8-dcc7-4177-b455-3779a121164e // OK\nIMG_1167.JPG // c144f590-60c8-486d-8a80-4c9a8ba8846e // OK\nIMG_1168.JPG // c847cbca-cf17-4d8c-a267-f7d8df60ed47 // OK\nIMG_1169.JPG // 3ec5084d-beca-4fba-bb24-7f8146315df1 // OK\nIMG_1170.JPG // ce2177ae-d03e-4a61-9dfb-4229542572fe // OK\nIMG_1305.JPG // a10c24e6-1128-49f8-aff2-79dc5b0a864c // OK\nIMG_1339.JPG // a800a73e-23c4-45f8-81e7-793661f52716 // OK\nIMG_1340.JPG // 51be371c-da0c-4797-8f51-0fc455d925b5 // OK\nIMG_1341.JPG // 1925e256-2e32-4264-ac3c-1ff745eab097 // OK\nIMG_1342.JPG // b17c0864-783c-4cbd-88f9-713964095b15 // OK\nIMG_1344.JPG // ecfb87af-91a4-45fc-896f-93f08f6c78d5 // OK\nIMG_1346.JPG // dee29ed4-a03e-4202-ad0b-821651c490ba // OK\nIMG_1419.JPG // 21533e57-cb03-48d1-bea4-cf77ba147e6c // OK\nIMG_1420.JPG // fc96f0e7-acf6-4f5f-a018-4f29b075cb23 // OK\nIMG_1422.JPG // 5cfe6e3c-c952-4108-a310-811326e5be60 // OK\nIMG_1423.JPG // 9b483e23-b7a3-44ff-b283-d9a51cb3c82f // OK\nIMG_1425.JPG // 64a088f2-bdb8-4965-bc46-2d62a79fc7be // OK\nIMG_1426.JPG // b98fd736-38fa-4682-ab0c-4e9198003dc9 // OK\nIMG_1521.JPG // ea9efbd8-bd10-463f-9e80-920e95cbb0e7 // OK\nIMG_1703.JPG // af1e6513-38a8-445b-8e6c-bf509d874c2d // OK\nIMG_2788.JPG // df86da0d-0038-41ad-98f1-aed1b4bcdaf9 // OK\nIMG_2789.JPG // 5135011a-f137-459e-843a-ea0020ee863a // OK\nIMG_2790.JPG // 234552f0-f9de-4823-b897-1df8f0c1cdc7 // OK\nIMG_2791.JPG // e94728e1-7ece-4493-8fe2-4a90b44491ca // OK\nIMG_2794.JPG // 52180e66-1214-4e56-b8c7-cbba20602e07 // OK\nIMG_2796.JPG // a3e6bf43-996c-4a65-9e89-c767dc97b336 // OK\nIMG_2821.JPG // c5df4a88-6390-4401-8c3f-a50f5e88e88e // OK\nIMG_2822.JPG // 2a8fb1ee-5ca2-4a25-a0ee-8751b2ef1c24 // OK\nIMG_2825.JPG // 9cc399d9-575e-4404-8d0f-24768d5c402e // OK\nIMG_2831.JPG // 276d3646-d1eb-4a7b-9362-e02cddf99047 // OK\nIMG_2877.JPG // 031c32d3-f98d-43b6-8ec3-b9b938505366 // OK\nIMG_2889.JPG // e2258b4c-5461-4976-a372-7be17f6fffba // OK\nIMG_2892.JPG // b7552ddb-d1c2-4b42-bfb9-bd02123a68cc // OK\nIMG_2893.JPG // 0eec60e8-233f-403e-8e60-62015266517c // OK\nIMG_2894.JPG // bbd38769-9370-4c20-a3ea-9ba77a0e9200 // OK\nIMG_2895.JPG // 6f1a966e-e8ce-4b24-9fa4-772d523eaaf3 // OK\nIMG_2896.JPG // 6c229b59-9815-48b2-92e3-5ae48f1a93ba // OK\nIMG_2897.JPG // 766a92d5-b7b5-40de-a18c-7282d34c72a4 // OK\nIMG_2898.JPG // 70c65240-80e1-4889-80ed-a2e686a65b9b // OK\nIMG_2899.JPG // 6fb2385b-1126-4b44-9755-f67c3810c11d // OK\nIMG_2900.JPG // 3584289a-d2a5-4b3a-81ef-7ccf71cf9225 // OK\nIMG_2956.JPG // 7e063b49-90db-4ed1-9c4f-9952b0daacea // OK\nIMG_2957.JPG // cd6f3076-e243-4ac9-9dc0-5086026f87ea // OK\nIMG_2958.JPG // 0088b7d0-09a1-47e4-b51a-8725a185eb2e // OK\nIMG_2959.JPG // 979e17bd-58ce-41f7-bf76-7174ffba0f4b // OK\nIMG_2960.JPG // 932a7bd6-aedb-4125-8c1a-e922bacfcf20 // OK\nIMG_2999.JPG // f357e32e-4159-49f0-832c-2afe69cfe9ac // OK\nIMG_3084.JPG // 1e73fb42-662e-491d-9992-bb0ab8dc96fd // OK\nIMG_3085.JPG // 1bec9458-a804-4704-bfb5-1315094bb4a3 // OK\nIMG_3086.JPG // b47af85e-2ac9-4428-b273-d81dbb07034f // OK\nIMG_3087.JPG // d46020da-3b97-479b-a3ba-9943e1825798 // OK\nIMG_3088.JPG // e99be1c3-9c61-4a7a-9d73-743ffe3cb7f5 // OK\nIMG_3089.JPG // d4c607fd-40ed-46c7-b348-974eed9d463d // OK\nIMG_3092.JPG // d634859b-5e84-4536-b82a-be32468ec1cc // OK\nIMG_3152.JPG // 9bc6a271-b703-417a-8080-66ad0d9957d4 // OK\nIMG_3153.JPG // fd5a0170-a535-4323-9aef-c9824bebffdb // OK\nIMG_3154.JPG // 9cd9a792-8e56-4232-894d-c5a4743a9ac8 // OK\nIMG_3155.JPG // 32c6fde6-4178-4a86-ba6e-308b6e4f84c0 // OK\nIMG_3156.JPG // 2b49fade-b528-4547-a4dc-50fbe06671a5 // OK\nIMG_3157.JPG // cea2ed9d-61e5-442c-87e2-9fb9375347dd // OK\nIMG_3232.JPG // ad4581b6-4c20-43e0-97da-d47618ff8b59 // OK\nIMG_3271.JPG // 8fdaeb02-c114-454c-97e1-dbb368a856b6 // OK\nIMG_3272.JPG // 9cd7b689-3a1b-4bd6-807f-740163c3624d // OK\nIMG_3274.JPG // 266b334d-1dfb-4343-a0ca-cc16f25864ec // OK\nIMG_3317.JPG // 34f0b4c2-6f1f-425e-93aa-48df2b93669a // OK\nIMG_3319.JPG // dabe2cb7-c4f5-4858-b1aa-e14cc3526332 // OK\nIMG_3331.JPG // bfb0016e-5631-41d7-b1c0-3a45441c321d // OK\nIMG_3343.JPG // dc13d735-a53a-47e1-b1de-c4490c19434c // OK\nIMG_3403.JPG // 536d6b8f-b3a3-460d-a555-4de4c459f6c8 // OK\nIMG_3405.JPG // 1bbaf98d-43c2-49b3-b161-d9f953bfc45d // OK\nIMG_3407.JPG // 4033a142-4150-4392-a5ff-d20d6e2b8848 // OK\nIMG_3408.JPG // e51333cb-526d-48ac-83c7-3792904a8c8d // OK\nIMG_3411.JPG // d791408b-ecf2-4967-bb42-67434e80102c // OK\nIMG_3413.JPG // 2eb001c4-0389-4030-aa27-2d52c5672a84 // OK\nIMG_3415.JPG // c5285104-aded-4cfb-bed9-d0e39b39efa4 // OK\nIMG_3416.JPG // 9050f7a8-aa68-4cf3-82ba-43df5795156c // OK\nIMG_4324.JPG // 55714c72-68db-45bf-ac66-b08719441b8e // OK\nIMG_4331.JPG // 0301d29f-ae39-45cc-85ad-eba5da094887 // OK\nIMG_4346.JPG // f7746720-4334-4a70-bb11-c1c29b826d60 // OK\nIMG_4382.JPG // 350e109f-86ba-4ebf-a10e-e47ff213062d // OK\nIMG_4385.JPG // f16f392f-adda-40d8-8c28-09fbbf2176e8 // OK\nIMG_4388.JPG // ca9fb31a-b67a-43d6-bb58-461fdfed3c78 // OK\nIMG_4391.JPG // 984c37a7-c128-464c-89cb-2766de669ce0 // OK\nIMG_4414.JPG // 03f33705-46d3-40a7-a594-f56930b6abc3 // OK\nIMG_4422.JPG // fbb9c554-1b60-4f5b-8400-b38e70b6da19 // OK\nIMG_5183.JPG // 72cdcf72-286d-43ba-a2f8-952d18468cd1 // OK\nIMG_5211.JPG // 75bbf983-a528-4689-b913-b68104262d19 // OK\nIMG_5289.JPG // 4426f259-ce60-4774-a507-8ce15ab25591 // OK\nIMG_5293.JPG // 7af03bef-5b43-4dd5-b594-e81978eed43f // OK\nIMG_5350.JPG // c0d3329c-079f-4262-90d8-4271837dd4f9 // OK\nImagen 030.jpg // 45588011-f584-4f0d-89c9-95278de981f6 // OK\nImagen008.jpg // c861b4de-127a-4dc0-84ea-9cb96fb380f2 // OK\nImagen148.jpg // c537847b-5d4f-4bbb-9dd3-e5399a41e88e // OK\nImagen217.jpg // 6602b9ca-6616-41ba-98c8-3438fadf1938 // OK\n\n\nMVC-009F.JPG // 5cc580f3-12ef-4618-91e1-a84b6ab92271 // OK\nMVC-023S.JPG // bc6beb45-e372-4579-a947-f5043a01ae4d // OK\nMVC-024S.JPG // 9ba84daa-e00c-4975-a07b-3ae23ef8f884 // OK\nMVC-025S.JPG // a8c2a746-2a65-4872-b7b5-0bd5edf965c9 // OK\nMVC-027S.JPG // 9004ef22-5f26-404c-8c88-9c42c0380573 // OK\nMYDC0089.JPG // 68c2c9fc-00b7-4309-a282-6bb0c3c1dd51 // OK\nP1100611.JPG // 1148d437-fc44-4c51-af4a-4751e242b3b7 // OK\nP1100612.JPG // 5c163478-c61b-4e7c-8e52-2e5eac30bebb // OK\nP1100613.JPG // c9dab11e-0663-42f8-8c93-4e2351b15d4c // OK\nP1100634.JPG // 1dd9245d-44a9-4277-beef-07e26af8a5f9 // OK\nP1100669.JPG // 9602d114-4a09-47ea-b77b-adaaee3cc402 // OK\nP1100683.JPG // a1b9c185-cc95-4549-bdcb-37ee294c3b6a // OK\nP1100685.JPG // 96677c75-b387-4180-91d2-17ab6c766fdf // OK\nP1100696.JPG // 6423124e-77ca-456d-b101-472c184ae377 // OK\nP1100698.JPG // 4c0d1186-940c-46da-a2cc-2c3d43ab3c98 // OK\nP1100699.JPG // ee0135c5-b6c2-4f5f-9a12-3e44eb05f803 // OK\nP1100700.JPG // b10efb57-70a4-48d6-a846-121ded4546f8 // OK\nP1100702.JPG // 19d3ad8c-767c-4349-8958-2a900c26514c // OK\nP1100712.JPG // 3064e6fd-d1cc-48d3-b277-9ed8010c290f // OK\nPICT0001.JPG // 09d3e6d7-e10a-49f7-a637-99558dd07390 // OK\nPICT0002.JPG // 70ef75d6-7dc9-4686-ae04-8fd5da54c7d6 // OK\nPICT0003.JPG // 516632ce-d25b-4f1e-8912-32ff15c5dc39 // OK\nPICT0004.JPG // e3ffb0c0-8a9a-42b5-a18f-bba4de6c6032 // OK\nPICT0005.JPG // eb68c324-0217-4343-b578-9433959d8dbc // OK\nPICT0006.JPG // 177756dc-047a-4840-ae11-099eacecf916 // OK\nPICT0007.JPG // a9f12e8b-e35d-49b4-9d57-720264290617 // OK\nPICT0008.JPG // 0db894ec-eb65-405b-ab4c-032ddac02470 // OK\nPICT0010.JPG // d809ce26-ad82-4d34-9a5f-57e2ca88a726 // OK\nPICT0011.JPG // ce6b6afa-c7cb-4b3a-b58f-5b256ae49cee // OK\nPICT0012.JPG // ff498de5-a7cc-41b0-9eb2-f75543e023fd // OK\nPICT0013.JPG // ee60cc50-375e-43ec-b52e-ea99926a8b2f // OK\nPICT0245.JPG // 577601a0-044c-41a0-8ecd-25d2d27e8295 // OK\nPICT0386.JPG // 0e51a561-b938-48f6-8bc6-3c3bf4c72c44 // OK\nPICT0391.JPG // 4d7e7669-3ae6-4fea-89c6-c2e49176cba5 // OK\nPICT0398.JPG // ed9ee22a-20d5-4ef6-88ba-c055cd81402e // OK\nPICT0399.JPG // 3e11fadc-a327-4f62-af30-3214acc20a54 // OK\nPICT0407.JPG // d7d15a07-5592-40f6-bde6-0b077b683be7 // OK\nPICT0409.JPG // b2e02646-aeae-40d9-b8d0-54ad8e2f6d00 // OK\nPICT0410.JPG // a5abe040-ead0-4f35-94e8-3c6e927051b7 // OK\nPICT0426.JPG // 4bde9015-b349-4c04-8720-a34f1a399ab6 // OK\nTORRE EL TIGRITO 01.jpg // 2563fffe-d621-4799-8e81-6ad57049cdaa // OK\nTORRE EL TIGRITO 02.jpg // 5c2b5753-0650-4a95-a35a-a888c00a0c9e // OK\nTORRE EL TIGRITO 06.jpg // c8c2a11d-8c1e-46f9-ac90-ec792b1d3ef9 // OK\ndiatancia entre g4 y g3 [20 mts.].JPG // 898bce02-f198-49ff-a670-a6338fbee62b // OK\ntorre cerro el pavon 009.jpg // da641681-f3be-4328-b2df-9b1374f93f11 // OK\ntorre cerro el pavon 010.jpg // 08b4b2bd-4e36-4233-bc1d-6ac8180165ba // OK\ntorre cerro el pavon 014.jpg // 299f18e3-1105-4615-a91b-083c35923ea3 // OK\ntorre cerro el pavon 017.jpg // a3a860aa-a618-45a9-b799-619e65d2a638 // OK\ntorre cerro el pavon 018.jpg // 47f620e9-c15e-4356-b96d-77475e5ca89d // OK\ntorre cerro el pavon 019.jpg // 74d6d455-af1b-4afd-bd0f-11b7952a204d // OK\ntorre cerro el pavon 023.jpg // 916a57d3-81dd-4495-a241-74fff264ab3f // OK\ntorre cerro el pavon 024.jpg // f3bda7d7-2675-4b1c-b504-ac9efe8ddd13 // OK\ntorre cerro el pavon 025.jpg // 1261a5de-9092-4fa6-86dc-3bb8dd474c20 // OK\ntorre cerro el pavon 026.jpg // 680751e4-64bd-4263-8a18-195709fe9106 // OK\ntorre cerro el pavon 043.jpg // 9863bd57-bc3c-4acd-a84e-b6fdf68f1fe9 // OK\ntorre cerro el pavon 044.jpg // 30c3a41a-d0b2-468c-b504-8c65f3c451a9 // OK\ntorre cerro el pavon 045.jpg // 1a16545e-5dbc-4e09-831d-76d68c74911b // OK\ntorre cerro el pavon 049.jpg // 9fc229db-5253-4d36-9eef-d3015b7eb1fc // OK\ntorre cerro el pavon 068.jpg // b8fe8e0a-6550-424d-977c-a27a54e1bd04 // OK\ntorre cerro el pavon 075.jpg // b6dd061a-a68d-4d91-a39f-711968445571 // OK\ntorre cerro el pavon 080.jpg // d12264cf-3d7b-469c-9445-da8dce8dabef // OK\ntorre cerro el pavon 085.jpg // c6d587fe-5f3a-46ea-bc04-7ff54f10b4ae // OK\ntorre cerro el pavon 086.jpg // ea34cbad-8d50-4b5f-aed0-91d7fe40a754 // OK\ntorre cerro el pavon 087.jpg // 6e274dfc-411a-4bf3-9151-51b96f662248 // OK\n\n\n\nuploaded_images_df = pd.DataFrame(upload_batch)\nuploaded_images_df\n\n\n\n\n\n  \n    \n      \n      image_name\n      image_id\n      image_status\n    \n  \n  \n    \n      0\n      41.JPG\n      452a0b58-0dc5-41ff-83d1-8d1ae7bd5d1c\n      OK\n    \n    \n      1\n      CIMG0030.JPG\n      96b7774e-f5ad-4591-aa71-99ad5c71135e\n      OK\n    \n    \n      2\n      CIMG0031.JPG\n      3027bc7e-6e21-4b13-a7d7-bb7e08ce6824\n      OK\n    \n    \n      3\n      CIMG0056.JPG\n      1320ab2e-3405-4853-bd7e-b0ef0f915d4b\n      OK\n    \n    \n      4\n      CIMG0059.JPG\n      aa67eceb-3db0-4026-bf16-0842c006e6ac\n      OK\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      198\n      torre cerro el pavon 075.jpg\n      b6dd061a-a68d-4d91-a39f-711968445571\n      OK\n    \n    \n      199\n      torre cerro el pavon 080.jpg\n      d12264cf-3d7b-469c-9445-da8dce8dabef\n      OK\n    \n    \n      200\n      torre cerro el pavon 085.jpg\n      c6d587fe-5f3a-46ea-bc04-7ff54f10b4ae\n      OK\n    \n    \n      201\n      torre cerro el pavon 086.jpg\n      ea34cbad-8d50-4b5f-aed0-91d7fe40a754\n      OK\n    \n    \n      202\n      torre cerro el pavon 087.jpg\n      6e274dfc-411a-4bf3-9151-51b96f662248\n      OK\n    \n  \n\n203 rows × 3 columns\n\n\n\nSave a csv\n\nuploaded_images_df.to_csv('20221012_203_Images_Uploaded.csv', index=False)\n\n(PosixPath('train_images'), '41.JPG')"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  }
]