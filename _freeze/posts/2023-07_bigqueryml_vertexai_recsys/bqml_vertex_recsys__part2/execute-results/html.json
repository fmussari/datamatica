{
  "hash": "2438cf0413baf6aa75eb088b90ac17ff",
  "result": {
    "markdown": "---\ntitle: RecSys MLOps. BigQuery ML and Vertex AI. Part 2\nauthor: \"Francisco Mussari\"  \ndate: 2023-07-20  \nimage: \"pipeline.PNG\"\ncategories: [Movielens, BigQuery, BigQuery ML, RecSys, Recommender, Pipeline, Vertex AI, MLOps]  \nformat:\n  html:\n    toc: true\n    toc-depth: 3\n---\n\n## Overview\n\n[Part 1](bqml_vertex_recsys__part1.qmd) was about creating a Vertex AI pipeline for training and deploying Matrix Factorization model using BigQuery ML.  \n  \nWe ended with a model we can use from BigQuery, but that is also available as a Cloud Run endpoint, deployed as a Docker container.\n\n::: {.callout-note}\nThis notebook is intented to be run in Colab.\n:::\n\n## Get recommendations from deployed endpoint\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom google.colab import auth\n\nauth.authenticate_user()\n```\n:::\n\n\n::: {.cell execution_count=2}\n\n::: {.cell-output .cell-output-stdout}\n```\nenv: GOOGLE_APPLICATION_CREDENTIALS=./creds/pythonapi-205723-43fb3e6400c5.json\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-stdout}\n```\n<google.oauth2.service_account.Credentials object at 0x7fb3980d2f70> pythonapi-205723\n```\n:::\n:::\n\n\nAs defined in part 1, the service was deployed as `recommender-model`.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nSERVICE = \"recommender-model\"\nREGION = 'us-central1'\nPROJECT_ID = \"[your-project-id]\"\n```\n:::\n\n\nTo get the endpoint url, you can navigate to:  \n\n```\n[https://console.cloud.google.com/run/detail/<REGION>/recommender-model/metrics?project=<PROJECT_ID>]()\n```\n  \nOr with the following command:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nservice_url = ! gcloud run services describe {SERVICE} --platform managed --region {REGION} --format 'value(status.url)'\nservice_url = service_url[0] + \"/v1/models/recommender_model:predict\"\nservice_url\n```\n:::\n\n\nAnd the endpoint should look something like this:  \n`https://recommender-model-<10LETTERID>-uc.a.run.app/v1/models/recommender_model:predict`\n\n### Call the deployed model endpoint\n\nTo call the API simply use `curl`. In this case we get recommendations for the `user_id` equals `1`:  \n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n! curl --header \"Content-Type: application/json\" \\\n  --request POST \\\n  --data '{\"instances\": [{\"user_id\": 1}]}' \\\n  https://recommender-model-<10LETTERID>-uc.a.run.app/v1/models/recommender_model:predict\n```\n:::\n\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-stdout}\n```\n{\r\n    \"predictions\": [\r\n        {\r\n            \"predicted_rating\": [7.1595457186221525, 6.931200454403859, 6.7487105522542379, 6.6099371431826093, 6.3368375925279663, 6.3162291916598949, 6.2034087300038294, 6.1908018877869777, 6.095065519595515, 6.0748385283824344, 6.0707896719918022, 6.0115152056191317, 5.9950883198035312, 5.9266960142259579, 5.8977393292303706, 5.8963543166167049, 5.8879213166109317, 5.8651216371567951, 5.8157813717342961, 5.7918400837633026, 5.7728366859651743, 5.7459233895973343, 5.7286289144902627, 5.7236862593334399, 5.6735891385114323, 5.6712837959564055, 5.6344651298840862, 5.6144777548802312, 5.6136065773986719, 5.5966244955484585, 5.5826125214031448, 5.5438993473737597, 5.5405328509132108, 5.5156535458862912, 5.5060371378140998, 5.4983916934699879, 5.4779312652757479, 5.4381644519356804, 5.436539915444734, 5.4274984607954586, 5.4162018042063238, 5.4131954911985822, 5.4112950178511134, 5.3977833272890878, 5.3924309392602101, 5.3921355023131454, 5.3795566101479775, 5.3784815662419794, 5.3724805166998593, 5.3716275159116167],\r\n            \"predicted_item_id\": [\"3382\", \"3920\", \"2178\", \"662\", \"469\", \"199\", \"215\", \"2073\", \"881\", \"3132\", \"1900\", \"1615\", \"3141\", \"2928\", \"445\", \"973\", \"3605\", \"766\", \"935\", \"1841\", \"2330\", \"944\", \"2314\", \"3447\", \"2171\", \"3327\", \"2419\", \"2351\", \"557\", \"3720\", \"156\", \"2066\", \"2475\", \"2970\", \"26\", \"2360\", \"3018\", \"2272\", \"2506\", \"3670\", \"1631\", \"414\", \"2165\", \"1177\", \"2264\", \"743\", \"2725\", \"1934\", \"2710\", \"3275\"]\r\n        }\r\n    ]\r\n}\n```\n:::\n:::\n\n\nWhich return the top 50 items (movies) by predicted rating for the specified user.\n\n## BigQuery\n\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfrom google.cloud import bigquery\nclient = bigquery.Client(project=PROJECT_ID)\n```\n:::\n\n\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nMODEL_DATASET = \"[bq-model-dataset]\"  # @param {type:\"string\"}\nMOVIELENS_DATASET = \"[bq-data-dataset]\"  # @param {type:\"string\"}\n```\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nmovies_df = client.query(f'''\n  SELECT *\n  FROM `{MOVIELENS_DATASET}.movie_titles`\n''').to_dataframe()\nmovies_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>movie_id</th>\n      <th>movie_title</th>\n      <th>genre</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>632</td>\n      <td>Land and Freedom (Tierra y libertad) (1995)</td>\n      <td>War</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>665</td>\n      <td>Underground (1995)</td>\n      <td>War</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>760</td>\n      <td>Stalingrad (1993)</td>\n      <td>War</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>777</td>\n      <td>Pharaoh's Army (1995)</td>\n      <td>War</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1450</td>\n      <td>Prisoner of the Mountains (Kavkazsky Plennik) ...</td>\n      <td>War</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "bqml_vertex_recsys__part2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}