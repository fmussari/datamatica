{
  "hash": "ae293b7d48a74398bd19cc70bb60de8c",
  "result": {
    "markdown": "---\ntitle: Gladia API using `asyncio` with Python\nauthor: \"Francisco Mussari\"  \ndate: 2024-03-15  \nimage: \"\"\ncategories: [Whisper, Transcription, asyncio, aiohttp]  \nformat:\n  html:\n    toc: true\n    toc-depth: 3\n---\n\n## Introduction\n\n### Discovering Gladia\n\nIn the last couple of months I have been working with a client that needed Apple Podcast and YouTube transcriptions\n\n\nUsing their own words, [Gladia](https://www.gladia.io/) \"provides a fast and accurate way to turn unstructured data into valuable business knowledge — starting with audio.\"  \n  \nBesides their \"Audio intelligence\" features, in this post we are going to be working with the \"Speech-to-Text\" service, which is Powered by their proprietary [Whisper-Zero](https://www.gladia.io/whisper-zero) ASR. You can use the API for free with a quota of 10 hours of audio per month.\n\n### Usage and Documentation\n\nGladia's [documentation and API reference](https://docs.gladia.io/chapters/introduction/pages/introduction) are very good. They also have a repository with Python examples for Pre-recorded and Live (Streaming) use cases.  \n  \n### Asyncio in Python\n\nThis post is about using the API with async Python, something that is not yet in Gladia's documentation.\n\nWhen you need to upload or transcribe multiple files, it makes sense to use asyncio capabilities to process those files since is a I/O-bound task. \n\n## Configuring your account\n\nYou can go to the [Getting Started](https://docs.gladia.io/chapters/get-started/pages/configure-account) section in the documentation to configure your account and get an API key.\n\n## Asyncio with Gladia: A Step-by-Step Guide\n\n### Import Libraries\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport asyncio\nimport aiohttp\nimport requests\nimport os\n\nimport nest_asyncio\nnest_asyncio.apply()\n\nfrom time import sleep\nfrom pathlib import Path\nfrom typing import List\nfrom time import perf_counter\n```\n:::\n\n\n### Get API Key\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport sys\nif \"google.colab\" in sys.modules:\n    # If running in Colab\n    from google.colab import userdata\n    x_gladia_key = userdata.get('GLADIA_API_KEY')\nelse:\n    from dotenv import load_dotenv\n    load_dotenv(\"creds/.env\")\n    x_gladia_key = os.environ.get('GLADIA_API_KEY')\n```\n:::\n\n\n### Context manager to measure time\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# https://stackoverflow.com/a/69156219\nclass catchtime:\n    def __enter__(self):\n        self.start = perf_counter()\n        return self\n\n    def __exit__(self, type, value, traceback):\n        self.seconds = round(perf_counter() - self.start, 2)\n        m, s = divmod(self.seconds, 60)\n        self.m, self.s = int(m), round(s, 1)\n        self.readout = f'Time: {self.seconds:.3f} seconds'\n```\n:::\n\n\n### Python Code\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nasync def process_response(response):\n\n    if response.status != 200:\n        print(f\"- Request failed with status: {response.status}\")\n        json_response = await response.text()\n        print(f\"Json Response: {json_response}\")\n        print('- End of work');\n        return None\n    else:\n        print(\"- Request successful\")\n        return await response.json()\n\n\nasync def async_make_request(session, url, headers, method=\"GET\", data=None):\n    \n    if method == \"POST\":\n        async with session.post(url, headers=headers, data=data) as response:\n            return await process_response(response)\n    else:\n        async with session.get(url, headers=headers) as response:\n            return await process_response(response)\n\n\nasync def async_upload_file_to_gladia(session, file_path):\n\n    with catchtime() as t:\n        file_name = str(file_path.with_suffix(''))\n        content_type = f\"audio/{file_path.suffix[1:]}\"\n\n        with open(file_path, \"rb\") as f:\n            data = aiohttp.FormData()\n            data.add_field(\"audio\", f, filename=file_name, content_type=content_type)\n\n            print(\"- Uploading file to Gladia...\")\n            json_response = await async_make_request(\n                session, \"https://api.gladia.io/v2/upload/\",\n                headers=headers,  method=\"POST\", data=data\n            )\n\n    print(f'Upload Time: {t.seconds} seconds for `{file_path.name}`')\n\n    return json_response\n\n\nasync def async_upload_orchestrator(files_to_upload):\n\n    async with aiohttp.ClientSession() as session:\n\n        tasks = [\n            async_upload_file_to_gladia(\n                session, file\n            ) for file in files_to_upload\n        ]\n\n        results = await asyncio.gather(*tasks)\n        return results\n\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nheaders = {\n    \"x-gladia-key\": x_gladia_key,\n    \"accept\": \"application/json\",\n    \"Content-Type\": \"application/json\"\n}\n\n\nfiles_path = Path(\"./data\")\nfiles_to_upload = [f for f in files_path.iterdir()]\n\nfor file in files_to_upload:\n    print(file)\n\nwith catchtime() as t:\n    results = asyncio.run(\n        async_upload_orchestrator(files_to_upload)\n    )\n\nprint(f'Total Time: {t.seconds} seconds')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndata/Introducción Master Class.webm\ndata/Introducing_ Better Offline.mp3\ndata/You need to classify documents before trying to extract data.webm\n- Uploading file to Gladia...\n- Uploading file to Gladia...\n- Uploading file to Gladia...\n- Request failed with status: 400\nJson Response: {\"statusCode\":400,\"timestamp\":\"2024-03-15T20:26:59.005Z\",\"path\":\"/v2/upload/\",\"message\":\"Unexpected token - in JSON at position 0\"}\n- End of work\nUpload Time: 4.69 seconds for `Introducción Master Class.webm`\n- Request failed with status: 400\nJson Response: {\"statusCode\":400,\"timestamp\":\"2024-03-15T20:27:00.954Z\",\"path\":\"/v2/upload/\",\"message\":\"Unexpected token - in JSON at position 0\"}\n- End of work\nUpload Time: 6.65 seconds for `You need to classify documents before trying to extract data.webm`\n- Request failed with status: 400\nJson Response: {\"statusCode\":400,\"timestamp\":\"2024-03-15T20:27:01.592Z\",\"path\":\"/v2/upload/\",\"message\":\"Unexpected token - in JSON at position 0\"}\n- End of work\nUpload Time: 7.31 seconds for `Introducing_ Better Offline.mp3`\nTotal Time: 7.31 seconds\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nresults\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n[None, None, None]\n```\n:::\n:::\n\n\n",
    "supporting": [
      "async_gladia_files"
    ],
    "filters": [],
    "includes": {}
  }
}