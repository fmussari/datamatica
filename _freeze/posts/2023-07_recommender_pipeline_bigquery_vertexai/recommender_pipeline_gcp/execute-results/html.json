{
  "hash": "3ee7475c73e3deb9e38ee9a5c9d92b08",
  "result": {
    "markdown": "---\ntitle: Train and Deploy a RecSys using BigQuery ML and Vertex AI Pipeline\n\nauthor: \"Francisco Mussari\"  \ndate: 2023-07-17  \nimage: \"pipeline.PNG\"  \ncategories: [BigQuery, BigQuery ML, RecSys, Recommender, Pipeline, Vertex AI, Movielens]  \nformat:\n  html:\n    toc: true\n    toc-depth: 3\n    \n---\n\n## Overview\n\nThis post is about training a Matrix Factorization model with BigQuery ML and deploying it as Docker container. The end-to-end process is orchestrated through a Vertex AI pipeline.  \n  \nThe post is strongly based on this tutorial:\n- [YouTube: Recommendation Engine Pipeline with BigQuery ML and Vertex AI Pipelines using Matrix Factorization](https://youtu.be/S0wNWOR4WoE)\n  \nBut there are key differences:  \n\n1. This post documents the whole process, from loading the date to BigQuery to how to make recomendations in different ways.\n2. On July 5th there was a [Transition to BigQuery editions](https://cloud.google.com/bigquery/docs/editions-transition) which resulted in some changes being made to adapt the scripts showed in the video.\n\n::: {.callout-important}\n## This is Important\n\nThis is an example of a callout with a title.\n:::\n\n\n3. When trying to replicate the video tutorial I had to solve some issues with the pipeline failing to run. Most of the issues were very hard to debug, with misleading error messages and layers over layer of abstraction between python libraries and component definitions. At the end most of the errors were about the Default Service Account not having the requiered permission. So,\n4. In this post we can see and run each step and command to create a Service Account and grant this account granular permissions to the Google Cloud resources needed for the end to end process to run. This is what the Google documentation recommends.\n5. There are also the commands to enable each service API needed for the project.\n\n## Additional Resources\n- [YouTube: Lesson 7: Practical Deep Learning for Coders 2022 - Collaborative filtering deep dive](https://youtu.be/p4ZZq0736Po?t=3720)\n- [Tutorial: Use BigQuery ML to make recommendations from Google analytics data](https://cloud.google.com/bigquery/docs/bigqueryml-mf-implicit-tutorial)\n\n## Before you begin\n\n1. [Select or create a Google Cloud project](https://console.cloud.google.com/cloud-resource-manager). \n2. [Make sure that billing is enabled for your project](https://cloud.google.com/billing/docs/how-to/modify-project).\n3. You can run the code locally or in Colab. If you are locally you need to install the [gcloud CLI](https://cloud.google.com/sdk/docs/install).\n\n## Loading data into BigQuery\n\nReference: [Load the Movielens dataset into BigQuery](https://cloud.google.com/bigquery/docs/bigqueryml-mf-explicit-tutorial#step_two_load_the_movielens_dataset_into)\n\n### Authenticate your Google Cloud account\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom google.colab import auth as google_auth\ngoogle_auth.authenticate_user()\n```\n:::\n\n\n### Set your project ID\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nPROJECT_ID = \"[your-project-id]\"  # @param {type:\"string\"}\n```\n:::\n\n\n### Download MovieLens 1M movier ratings dataset\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n! curl -O 'http://files.grouplens.org/datasets/movielens/ml-1m.zip'\n! unzip -o ml-1m.zip\n```\n:::\n\n\nChange `::` delimiter to comma `,` and save as `.csv` files:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n! sed 's/::/,/g' ml-1m/ratings.dat > ratings.csv\n! sed 's/::/@/g' ml-1m/movies.dat > movie_titles.csv\n```\n:::\n\n\n### Create BigQuery datasets and populate the tables\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nMODEL_DATASET = \"[bq-model-dataset]\"  # @param {type:\"string\"}\nMOVIELENS_DATASET = \"[bq-data-dataset]\"  # @param {type:\"string\"}\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# To store the model\n! bq mk --location=US --dataset {PROJECT_ID}:{MODEL_DATASET}\n\n# To store movies and reviews tables\n! bq mk --location=US --dataset {PROJECT_ID}:{MOVIELENS_DATASET}\n```\n:::\n\n\nPopulate the tables\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Reviews table\n! bq load --project_id={PROJECT_ID} --source_format=CSV {PROJECT_ID}:{MOVIELENS_DATASET}.movielens_1m ratings.csv user_id:INT64,item_id:INT64,rating:FLOAT64,timestamp:TIMESTAMP\n\n# Movies table\n! bq load --project_id={PROJECT_ID} --source_format=CSV --field_delimiter=@ {PROJECT_ID}:{MOVIELENS_DATASET}.movie_titles movie_titles.csv movie_id:INT64,movie_title:STRING,genre:STRING\n```\n:::\n\n\n## Vertex AI Pipeline\n\n### Install Libraries\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n%%capture\n! pip install google-cloud-aiplatform==1.21.0 --upgrade\n! pip install kfp==2.0.1 --upgrade\n! pip install google-cloud-pipeline-components==2.0.0 --upgrade\n```\n:::\n\n\n### Restart the Kernel\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Automatically restart kernel after installs so that your environment can access the new packages\nimport IPython\napp = IPython.Application.instance()\napp.kernel.do_shutdown(True)\n```\n:::\n\n\n### Set Project Variables\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nPROJECT_ID = \"[your-project-id]\"  # @param {type:\"string\"}\nREGION = \"us-central1\"              # @param {type: \"string\"}\n\nBUCKET_NAME = \"[pipeline-bucket]\" # @param {type: \"string\"}\n\nPIPELINE_ROOT = f\"gs://{BUCKET_NAME}/\"   \n\nMODEL_DIR = PIPELINE_ROOT + \"recommender_model\"    # @param {type: \"string\"}\n```\n:::\n\n\n",
    "supporting": [
      "recommender_pipeline_gcp_files"
    ],
    "filters": [],
    "includes": {}
  }
}